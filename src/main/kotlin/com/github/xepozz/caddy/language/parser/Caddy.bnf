{
  parserClass="com.github.xepozz.caddy.language.parser.CaddyParser"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Caddy"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.xepozz.caddy.language.psi"
  psiImplPackage="com.github.xepozz.caddy.language.psi.impl"
  psiImplUtilClass="com.github.xepozz.caddy.language.psi.impl.CaddyPsiImplUtil"

  elementTypeHolderClass="com.github.xepozz.caddy.language.psi.CaddyTypes"
  elementTypeClass="com.github.xepozz.caddy.language.psi.CaddyElementType"
  tokenTypeClass="com.github.xepozz.caddy.language.psi.CaddyTokenType"

  tokens = [
    LBRACE = "LBRACE {"
    RBRACE = "RBRACE }"
    LPAREN = "LPAREN ("
    RPAREN = "RPAREN )"
    LBRACKET = "LBRACKET ["
    RBRACKET = "RBRACKET ]"
    COMMENT = "COMMENT"
    EOL = "EOL"
    IDENTIFIER = "IDENTIFIER"
    NUMBER = "NUMBER"
    TEXT = "TEXT"
    HEREDOC_START = "HEREDOC_START"
    HEREDOC_CONTENT = "HEREDOC_CONTENT"
    HEREDOC_END = "HEREDOC_END"
  ]
}

// Top level structure
caddyFile ::= item_*

private item_ ::= block | COMMENT | EOL

block_name ::= (LPAREN address RPAREN) | address+
address ::= IDENTIFIER | TEXT
{
  implements=["com.intellij.psi.NavigatablePsiElement" "com.intellij.psi.PsiLiteralValue"]
  extends="com.github.xepozz.caddy.language.psi.impl.CaddyAddressBaseImpl"
  methods=[getValue getReferences]
}

block ::= block_name? LBRACE EOL instructions RBRACE
{
  pin=3
  recoverWhile=block_recover
}
private block_recover ::= !(COMMENT | IDENTIFIER | SYMBOL | RBRACE | EOL)

private instructions ::= (instruction? EOL)*

private instruction ::= matcher_definition | directive | COMMENT

matcher_definition ::= MATCHER argument* block?
{
  pin=1
  recoverWhile=directive_recover
  implements=["com.intellij.psi.NavigatablePsiElement" "com.intellij.psi.PsiNamedElement"]
  extends="com.github.xepozz.caddy.language.psi.impl.CaddyMatcherDefinitionBaseImpl"
}

directive ::= modifier? IDENTIFIER argument* block?
{
  pin=2
  recoverWhile=directive_recover
  implements=["com.intellij.psi.NavigatablePsiElement" "com.intellij.psi.PsiNamedElement"]
  extends="com.github.xepozz.caddy.language.psi.impl.CaddyDirectiveBaseImpl"
}
private directive_recover ::= !(COMMENT | IDENTIFIER | TEXT | SYMBOL | AT | EOL)

modifier ::= SYMBOL

argument ::= named_matcher | simple_value | env_value | heredoc

named_matcher ::= MATCHER

simple_value ::= SYMBOL | TEXT | NUMBER | IDENTIFIER

env_value ::= LBRACE (TEXT|IDENTIFIER) RBRACE
{
  pin=2
}

heredoc ::= HEREDOC_START HEREDOC_CONTENT* HEREDOC_END
{
  pin=1
  implements=["com.intellij.psi.PsiLanguageInjectionHost" "com.intellij.psi.PsiLiteralValue"]
  extends="com.github.xepozz.caddy.language.psi.impl.CaddyHeredocContentImpl"
  methods=[isValidHost updateText createLiteralTextEscaper]
}

//private instruction_recover ::= !(TEXT | RBRACE)
